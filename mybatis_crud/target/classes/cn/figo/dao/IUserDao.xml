<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.figo.dao.IUserDao">

    <!--配置支持二级缓存 -->
    <cache/>

    <!-- 配置 查询结果的列名和实体类的属性名的对应关系 -->
    <resultMap id="userMap" type="uSeR">
        <!-- 主键字段的对应 -->
        <id property="userId" column="id"></id>
        <!--非主键字段的对应-->
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
    </resultMap>


    <!-- 查询所有 -->
    <!--配置好resultMap后，封装结果集使用resultMap属性，不配置使用resultType属性-->
    <select id="findAll" resultMap="userMap">
        <!--select id as userId,username as userName,address as userAddress,sex as userSex,birthday as userBirthday from user;-->
        <!--select * from user;-->
        <include refid="defaultUser"></include>
    </select>

    <!-- 保存用户 -->
    <insert id="saveUser" parameterType="user">
        <!-- 配置插入操作后，获取插入数据的id -->
        <selectKey keyProperty="userId" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username,address,sex,birthday)values(#{userName},#{userAddress},#{userSex},#{userBirthday});
    </insert>

    <!-- 更新用户 -->
    <update id="updateUser" parameterType="USER">
        update user set username=#{userName},address=#{userAddress},sex=#{userSex},birthday=#{userBirthday} where id=#{userId}
    </update>

    <!-- 删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        delete from user where id = #{uid}
    </delete>
    
    <!-- 根据id查询用户 -->
    <select id="findById" parameterType="INT" resultMap="userMap" useCache="true">
        select * from user where id = #{uid}
    </select>

    <!-- 根据名称模糊查询 -->
    <select id="findByName" parameterType="string" resultMap="userMap">
          select * from user where username like #{name}
        <!-- select * from user where username like '%${value}%' 这种方法本质上是sql语句的拼接方式实现的，因此不常用-->
   </select>

    <!-- 获取用户的总记录条数 -->
    <select id="findTotal" resultType="int">
        select count(id) from user;
    </select>

    <!-- 根据queryVo的条件查询用户 -->
    <select id="findUserByVo" parameterType="cn.figo.domain.QueryVo" resultMap="userMap">
        select * from user where username like #{user.userName}
    </select>

    <!-- if 标签的使用-->
<!--    <select id="findUserByCondition" parameterType="user" resultMap="userMap">
        select * from user where 1=1
        <if test="userName!=null and userName != '' ">
            and username like #{userName}
        </if>
        <if test="userAddress != null">
            and address like #{userAddress}
        </if>
    </select>-->

    <!-- where 标签的使用
    SQL 语句：
        select 字段 from user where id in (?)
    <foreach>标签用于遍历集合，它的属性：
        collection:代表要遍历的集合元素，注意编写时不要写#{}
        open:代表语句的开始部分
        close:代表结束部分
        item:代表遍历集合的每个元素，生成的变量名
        sperator:代表分隔符
    -->
    <select id="findUserByCondition" parameterType="user" resultMap="userMap">
        select * from user
        <where>
            <if test="userName!=null and userName != '' ">
                and username like #{userName}
            </if>
            <if test="userAddress != null">
                and address like #{userAddress}
            </if>
        </where>
    </select>

    <!-- 抽取重复的sql语句-->
    <sql id="defaultUser">
        select * from user
    </sql>

    <!-- foreach标签的使用，根据queryvo中的Id集合实现查询用户列表 -->
    <!-- SELECT * FROM USERS WHERE id IN (41,46,51) -->
    <select id="findUserInIds" resultMap="userMap" parameterType="queryvo">
        <!--select * from user -->
        <include refid="defaultUser"></include>
        <where>
            <if test="ids != null and ids.size()>0">
                <foreach collection="ids" open="and id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>

    <!-- ++++++++++++++++++++++++++++ 一对多查询 +++++++++++++++++++++++++++++++ -->
    <!-- 定义User的resultMap-->
    <resultMap id="userAccountMap" type="user">
        <!-- 主键字段的对应 -->
        <id property="userId" column="id"></id>
        <!--非主键字段的对应-->
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
        <!-- 配置user对象中accounts集合的映射 -->
        <collection property="accounts" ofType="account">
            <id property="aid" column="aid"></id>
            <result property="uid" column="uid"></result>
            <result property="money" column="money"></result>
        </collection>
    </resultMap>

    <!-- 查询所有 user的一对多的信息 -->
    <select id="findUserAccount" resultMap="userAccountMap">
        select * from user u left outer join account a on u.id = a.uid
    </select>

    <!-- 根据id查询用户 的一对多的信息 -->
    <select id="findUserAccountById" resultMap="userAccountMap" parameterType="int">
       select * from user u left outer join account a on u.id = a.uid where id = #{uid}
    </select>

    <!-- ++++++++++++++++++++++++++++ 多对多查询 +++++++++++++++++++++++++++++++ -->
    <!-- 定义User的resultMap-->
    <resultMap id="userRoleMap" type="user">
        <id property="userId" column="id"></id>
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
        <!-- 配置角色集合的映射 -->
        <collection property="roles" ofType="role">
            <id property="roleId" column="rid"></id>
            <result property="roleName" column="role_name"></result>
            <result property="roleDesc" column="role_desc"></result>
        </collection>
    </resultMap>

    <!-- 查询所有 -->
    <select id="findUserRole" resultMap="userRoleMap">
        select u.*,r.id as rid,r.role_name,r.role_desc from user u
         left outer join user_role ur  on u.id = ur.uid
         left outer join role r on r.id = ur.rid
    </select>


    <!-- ++++++++++++++++ 多对一延迟加载 ++++++++++++++++++++++ -->
    <resultMap id="userAccountLazyMap" type="user">
        <id property="userId" column="id"></id>
        <result property="userName" column="username"></result>
        <result property="userAddress" column="address"></result>
        <result property="userSex" column="sex"></result>
        <result property="userBirthday" column="birthday"></result>
        <!-- 配置user对象中accounts集合的映射 -->
        <collection property="accounts" ofType="account" select="cn.figo.dao.IAccountDao.findAccountByUidLazy" column="id"></collection>
    </resultMap>

    <select id="findAllLazyMulti" resultMap="userAccountLazyMap">
        select * from user;
    </select>

</mapper>